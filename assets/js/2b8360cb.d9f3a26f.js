"use strict";(self.webpackChunkopenmx=self.webpackChunkopenmx||[]).push([[801],{8524:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>f,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var t=i(4848),s=i(8453),c=i(1432);const o="# File Name\nSystem.CurrrentDirectory  ./    # default=./\nSystem.Name               silicon\nDATA.PATH                 /home/svu/slspkd/openmx3.9/DFT_DATA19\nlevel.of.stdout           1    # default=1 (1-3)\nlevel.of.fileout          0    # default=1 (0-2)\n\n# Definition of Atomic Species\nSpecies.Number       1\n<Definition.of.Atomic.Species\n   Si   Si7.0-s2p2d1   Si_PBE19\nDefinition.of.Atomic.Species>\n\n# Atoms\nAtoms.Number         8\nAtoms.SpeciesAndCoordinates.Unit   Ang # Ang|AU\n<Atoms.SpeciesAndCoordinates           # Unit=Ang.\n     1   Si   0.000000000000  0.000000000000  0.000000000000 2.0 2.0\n     2   Si   0.000000000000  2.715000000000  2.715000000000 2.0 2.0\n     3   Si   2.715000000000  0.000000000000  2.715000000000 2.0 2.0\n     4   Si   2.715000000000  2.715000000000  0.000000000000 2.0 2.0\n     5   Si   1.357500000000  1.357500000000  1.357500000000 2.0 2.0\n     6   Si   1.357500000000  4.072500000000  4.072500000000 2.0 2.0\n     7   Si   4.072500000000  1.357500000000  4.072500000000 2.0 2.0\n     8   Si   4.072500000000  4.072500000000  1.357500000000 2.0 2.0\nAtoms.SpeciesAndCoordinates>\nAtoms.UnitVectors.Unit             Ang #  Ang|AU\n<Atoms.UnitVectors                     # unit=Ang.\n  5.430000000000  0.000000000000  0.000000000000\n  0.000000000000  5.430000000000  0.000000000000\n  0.000000000000  0.000000000000  5.430000000000\nAtoms.UnitVectors>\n\n# SCF or Electronic System\nscf.XcType                 GGA-PBE     # LDA|LSDA-CA|LSDA-PW\nscf.SpinPolarization       off         # On|Off\nscf.ElectronicTemperature  300.0       # default=300 (K)\nscf.energycutoff           160.0       # default=150 (Ry)\nscf.maxIter                100         # default=40\nscf.EigenvalueSolver       band        # Recursion|Cluster|Band\nscf.lapack.dste            dstevx      # dstegr|dstedc|dstevx, default=dstegr\nscf.Kgrid                  7 7 7       # means nk1xnk2xnk3\nscf.Mixing.Type           rmm-diisk    # Simple|Rmm-Diis|Gr-Pulay\nscf.Init.Mixing.Weight     0.010       # default=0.30\nscf.Min.Mixing.Weight      0.001       # default=0.001\nscf.Max.Mixing.Weight      0.200       # default=0.40\nscf.Mixing.History         15          # default=5\nscf.Mixing.StartPulay       5          # default=6\nscf.criterion             1.0e-8       # default=1.0e-6 (Hartree)\n\nBand.dispersion             on        # on|off, default=off\nBand.Nkpath                  4\n<Band.kpath\n    20  0.0000 0.5000 0.0000   0.0000 0.0000 0.0000   L G\n    30  0.0000 0.0000 0.0000   -0.500 0.0000 -0.500   G X\n    10  -0.500 0.0000 -0.500   -0.375 0.2500 -0.375   X U\n    30  -0.375 0.2500 -0.375   0.0000 0.0000 0.0000   U G\nBand.kpath>\n",r={title:"Bandstructure calculation for silicon",sidebar_label:"Silicon bandstructure"},a=void 0,l={id:"silicon",title:"Bandstructure calculation for silicon",description:"Here we will calculate the bandstructure of silicon. First step is to perform",source:"@site/docs/silicon.mdx",sourceDirName:".",slug:"/silicon",permalink:"/openmx/silicon",draft:!1,unlisted:!1,editUrl:"https://github.com/pranabdas/openmx/blob/main/docs/silicon.mdx",tags:[],version:"current",frontMatter:{title:"Bandstructure calculation for silicon",sidebar_label:"Silicon bandstructure"},sidebar:"docs",previous:{title:"Setup",permalink:"/openmx/"},next:{title:"Convergence tests",permalink:"/openmx/convergence"}},d={},u=[];function p(n){const e={code:"code",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"Here we will calculate the bandstructure of silicon. First step is to perform\nthe scf calculation. Here is our input file:"}),"\n","\n",(0,t.jsx)(c.A,{language:"fortran",title:"src/silicon/silicon.in",showLineNumbers:!0,children:o}),"\n",(0,t.jsx)(e.p,{children:"We can run the calculation using mpirun or submit via job-script:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"mpirun -np 12 openmx silicon.in > silicon.out\n"})}),"\n",(0,t.jsx)(e.p,{children:"While the calculation is running, you can monitor the convergence by:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'grep "dUele" silicon.out | tail\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Next step is to extract bandstructure data from ",(0,t.jsx)(e.code,{children:"silicon.Band"})," file:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"bandgnu13 silicon.Band\n"})}),"\n",(0,t.jsx)(e.p,{children:"Finally, we can plot the bandstructure using gnuplot or any program of your\nchoice:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"gnuplot silicon.GNUBAND\n"})}),"\n",(0,t.jsxs)("picture",{children:[(0,t.jsx)("source",{type:"image/webp",srcSet:i(2702).A}),(0,t.jsx)("img",{src:i(6893).A,alt:"silicon-band"})]})]})}function f(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},6893:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/silicon-band-f3bf246285932d09200658c74103d286.png"},2702:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/silicon-band-02517c44ff3f76c928c6ad582d80c7ec.webp"}}]);